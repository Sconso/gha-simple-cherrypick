name: Cherry-pick

on:
  workflow_dispatch:
    inputs:
      prNumber:
        type: string
        description: Pull request number
        required: true
      tags:
        type: string
        description: Which tags to cherry-pick on
        required: true

jobs:
  release-staging:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Test cherry-pick
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "-- Git Infos --"
          git --version

          git config --global user.email ""
          git config --global user.name "Botman"
          
          git fetch --all > /dev/null

          echo -e "\n-- Inputs --"
          prNumber=${{ github.event.inputs.prNumber }}
          prInfos=$(gh pr view $prNumber --json mergeCommit,title,body)
          commitToMerge=$(echo $prInfos | jq -r '.mergeCommit.oid')   
          prTitle=$(echo $prInfos | jq -r '.title')
          prBody=$(echo $prInfos | jq -r '.body')

          echo "PR Number is $prNumber"
          echo "PR Title is $prTitle"
          echo "Commit is $commitToMerge"

          echo -e "\n ---------------------------------"
          echo -e "==== Starting cherry-pick ===="

          for tag in $(echo "${{ github.event.inputs.tags }}" | tr ',' '\n'); do
            targetBranch="release/$tag"
            cherryPickBranch="cherry-pick/$tag-$prNumber"

            echo -e "\n-- Trying to cherry-pick commit $commitToMerge in branch $targetBranch --"
            echo "- Checkout $targetBranch"
            git checkout $targetBranch && ret=$? || ret=$?
            
            if [ $ret -ne 0 ]; then
              echo "Branch $targetBranch does not exist, skipping"
              continue
            fi

            echo "- Creating a cherry-pick branch"
            git checkout -b $cherryPickBranch
            git pull origin $cherryPickBranch > /dev/null 2>&1 || true

            commitMessage=$(git log -n 1 --pretty=format:%s $commitToMerge)

            echo "- Cherry picking"
            git cherry-pick -m 1 --allow-empty --strategy-option theirs --no-commit $commitToMerge

            if [ $? -ne 0 ]; then
              echo "- Cherry-pick failed, commiting anyway"
            fi

            echo "- Pushing changes"
            git commit --allow-empty -am "$commitMessage"
            git push origin $cherryPickBranch

            echo "- Opening pull request"
            newPrTitle="[üêö/Cherrypick #$prNumber on $tag] $prTitle"
            newPrBody="### Cherrypicking #${prNumber} on $tag\n-------------\n$prBody"
            echo -e "$newPrBody" | gh pr create --title "$newPrTitle" --base $targetBranch --head $cherryPickBranch -F -
          done
